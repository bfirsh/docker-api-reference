{
  "swagger": "2.0",
  "info": {
    "title": "Docker Remote API",
    "description": "The Docker API is an HTTP REST API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.",
    "contact": {
      "name": "Docker",
      "url": "https://www.docker.com"
    },
    "version": "v1.25"
  },
  "basePath": "/v1.25",
  "schemes": [
    "http",
    "https"
  ],
  "produces": [
    "application/json",
    "text/plain"
  ],
  "consumes": [
    "application/json",
    "text/plain"
  ],
  "definitions": {
    "Version": {
      "type": "object",
      "properties": {
        "Version": {
          "type": "string"
        },
        "Os": {
          "type": "string"
        },
        "KernelVersion": {
          "type": "string"
        },
        "GoVersion": {
          "type": "string"
        },
        "GitCommit": {
          "type": "string"
        },
        "Arch": {
          "type": "string"
        },
        "ApiVersion": {
          "type": "string"
        },
        "BuildTime": {
          "type": "string"
        },
        "Experimental": {
          "type": "boolean"
        }
      }
    },
    "port": {
      "type": "object",
      "properties": {
        "PrivatePort": {
          "type": "integer"
        },
        "PublicPort": {
          "type": "integer"
        },
        "Type": {
          "type": "string"
        }
      }
    },
    "mount": {
      "type": "object",
      "properties": {
        "Source": {
          "type": "string"
        },
        "Destination": {
          "type": "string"
        },
        "Mode": {
          "type": "string"
        },
        "RW": {
          "type": "boolean"
        }
      }
    },
    "LogConfig": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Ulimit": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Soft": {
          "type": "integer"
        },
        "Hard": {
          "type": "integer"
        }
      }
    },
    "Device": {
      "type": "object",
      "properties": {
        "PathOnHost": {
          "type": "string"
        },
        "PathInContainer": {
          "type": "string"
        },
        "CgroupPermissions": {
          "type": "string"
        }
      }
    },
    "RestartPolicy": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "enum": ["always", "on-failure"]
        },
        "MaximumRetryCount": {
          "type": "integer"
        }
      },
      "default": {}
    },
    "PortBinding": {
      "type": "object",
      "properties": {
        "HostPort": {
          "type": "string"
        }
      }
    },
    "HostConfig": {
      "type": "object",
      "properties": {
        "Binds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Links": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LxcConf": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Memory": {
          "type": "integer",
          "default": 0
        },
        "MemorySwap": {
          "type": "integer",
          "default": 0
        },
        "MemoryReservation": {
          "type": "integer",
          "default": 0
        },
        "KernelMemory": {
          "type": "integer",
          "default": 0
        },
        "CpuShares": {
          "type": "integer"
        },
        "CpuPeriod": {
          "type": "integer"
        },
        "CpusetCpus": {
          "type": "string"
        },
        "CpusetMems": {
          "type": "string"
        },
        "BlkioWeight": {
          "type": "integer"
        },
        "MemorySwappiness": {
          "type": "integer"
        },
        "OomKillDisable": {
          "type": "boolean"
        },
        "PortBindings": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PortBinding"
          }
        },
        "PublishAllPorts": {
          "type": "boolean"
        },
        "Privileged": {
          "type": "boolean"
        },
        "ReadonlyRootfs": {
          "type": "boolean"
        },
        "Dns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DnsOptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DnsSearch": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ExtraHosts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "VolumesFrom": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CapAdd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "CapDrop": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "GroupAdd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RestartPolicy": {
          "$ref": "#/definitions/RestartPolicy"
        },
        "NetworkMode": {
          "type": "string"
        },
        "IpcMode": {
          "type": "string"
        },
        "PidMode": {
          "type": "string"
        },
        "UTSMode": {
          "type": "string"
        },
        "Devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Device"
          }
        },
        "Ulimits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ulimit"
          }
        },
        "SecurityOpt": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LogConfig": {
          "$ref": "#/definitions/LogConfig"
        },
        "CgroupParent": {
          "type": "string"
        },
        "ConsoleSize": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "VolumeDriver": {
          "type": "string"
        }
      }
    },
    "ContainerCreateConfig": {
      "type": "object",
      "properties": {
        "Hostname": {
          "type": "string",
          "description": "The hostname to use for the container, as a valid RFC 1123 hostname"
        },
        "Domainname": {
          "type": "string",
          "description": "The domain name to use for the container"
        },
        "User": {
          "type": "string",
          "description": "The user inside the container"
        },
        "AttachStdin": {
          "type": "boolean",
          "default": false,
          "description": "Whether to attach to stdin"
        },
        "Image": {
          "type": "string",
          "description": "The name of the image to use when creating the container"
        },
        "Command": {
          "type": "string",
          "description": "Command to run as a string or list of strings"
        },
        "Ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/port"
          }
        },
        "Labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "SizeRw": {
          "type": "integer"
        },
        "SizeRootFs": {
          "type": "integer"
        },
        "AttachStdout": {
          "type": "boolean",
          "default": true
        },
        "AttachStderr": {
          "type": "boolean",
          "default": true
        },
        "Tty": {
          "type": "boolean",
          "default": false
        },
        "OpenStdin": {
          "type": "boolean",
          "default": false
        },
        "StdinOnce": {
          "type": "boolean",
          "default": false
        },
        "Env": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Cmd": {
          "type": ["array", "string"],
          "items": {
            "type": "string"
          }
        },
        "Entrypoint": {
          "type": ["array", "string"],
          "items": {
            "type": "string"
          }
        },
        "Mounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mount"
          }
        },
        "WorkingDir": {
          "type": "string"
        },
        "NetworkDisabled": {
          "type": "boolean"
        },
        "MacAddress": {
          "type": "string"
        },
        "ExposedPorts": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "enum": [{}],
            "default": {}
          }
        },
        "HostConfig": {
          "$ref": "#/definitions/HostConfig"
        }
      },
      "example": {
        "Hostname": "",
        "Domainname": "",
        "User": "",
        "AttachStdin": false,
        "AttachStdout": true,
        "AttachStderr": true,
        "Tty": false,
        "OpenStdin": false,
        "StdinOnce": false,
        "Env": [
          "FOO=bar",
          "BAZ=quux"
        ],
        "Cmd": [
          "date"
        ],
        "Entrypoint": "",
        "Image": "ubuntu",
        "Labels": {
          "com.example.vendor": "Acme",
          "com.example.license": "GPL",
          "com.example.version": "1.0"
        },
        "Volumes": {
          "/volumes/data": {}
        },
        "WorkingDir": "",
        "NetworkDisabled": false,
        "MacAddress": "12:34:56:78:9a:bc",
        "ExposedPorts": {
          "22/tcp": {}
        },
        "StopSignal": "SIGTERM",
        "HostConfig": {
          "Binds": ["/tmp:/tmp"],
          "Links": ["redis3:redis"],
          "Memory": 0,
          "MemorySwap": 0,
          "MemoryReservation": 0,
          "KernelMemory": 0,
          "CpuPercent": 80,
          "CpuShares": 512,
          "CpuPeriod": 100000,
          "CpuQuota": 50000,
          "CpusetCpus": "0,1",
          "CpusetMems": "0,1",
          "MaximumIOps": 0,
          "MaximumIOBps": 0,
          "BlkioWeight": 300,
          "BlkioWeightDevice": [{}],
          "BlkioDeviceReadBps": [{}],
          "BlkioDeviceReadIOps": [{}],
          "BlkioDeviceWriteBps": [{}],
          "BlkioDeviceWriteIOps": [{}],
          "MemorySwappiness": 60,
          "OomKillDisable": false,
          "OomScoreAdj": 500,
          "PidMode": "",
          "PidsLimit": -1,
          "PortBindings": {
            "22/tcp": [{
              "HostPort": "11022"
            }]
          },
          "PublishAllPorts": false,
          "Privileged": false,
          "ReadonlyRootfs": false,
          "Dns": ["8.8.8.8"],
          "DnsOptions": [""],
          "DnsSearch": [""],
          "VolumesFrom": ["parent", "other:ro"],
          "CapAdd": ["NET_ADMIN"],
          "CapDrop": ["MKNOD"],
          "GroupAdd": ["newgroup"],
          "RestartPolicy": {
            "Name": "",
            "MaximumRetryCount": 0
          },
          "AutoRemove": true,
          "NetworkMode": "bridge",
          "Devices": [],
          "Ulimits": [{}],
          "LogConfig": {
            "Type": "json-file",
            "Config": {}
          },
          "SecurityOpt": [],
          "StorageOpt": {},
          "CgroupParent": "",
          "VolumeDriver": "",
          "ShmSize": 67108864
        },
        "NetworkingConfig": {
          "EndpointsConfig": {
            "isolated_nw": {
              "IPAMConfig": {
                "IPv4Address": "172.20.30.33",
                "IPv6Address": "2001:db8:abcd::3033",
                "LinkLocalIPs": ["169.254.34.68", "fe80::3468"]
              },
              "Links": ["container_1", "container_2"],
              "Aliases": ["server_x", "server_y"]
            }
          }
        }
      }
    },
    "ContainerConfig": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Image": {
          "type": "string"
        },
        "Command": {
          "type": "string"
        },
        "Created": {
          "type": "integer"
        },
        "Status": {
          "type": "string"
        },
        "Ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/port"
          }
        },
        "Labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "SizeRw": {
          "type": "integer"
        },
        "SizeRootFs": {
          "type": "integer"
        },
        "Hostname": {
          "type": "string"
        },
        "Domainname": {
          "type": "string"
        },
        "User": {
          "type": "string"
        },
        "AttachStdin": {
          "type": "boolean",
          "default": false
        },
        "AttachStdout": {
          "type": "boolean",
          "default": true
        },
        "AttachStderr": {
          "type": "boolean",
          "default": true
        },
        "Tty": {
          "type": "boolean",
          "default": false
        },
        "OpenStdin": {
          "type": "boolean",
          "default": false
        },
        "StdinOnce": {
          "type": "boolean",
          "default": false
        },
        "Env": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Cmd": {
          "type": ["array", "string"],
          "items": {
            "type": "string"
          }
        },
        "Entrypoint": {
          "type": ["array", "string"],
          "items": {
            "type": "string"
          }
        },
        "Mounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mount"
          }
        },
        "WorkingDir": {
          "type": "string"
        },
        "NetworkDisabled": {
          "type": "boolean"
        },
        "MacAddress": {
          "type": "string"
        },
        "ExposedPorts": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "enum": [{}],
            "default": {}
          }
        },
        "HostConfig": {
          "$ref": "#/definitions/HostConfig"
        }
      }
    },
    "NetworkConfig": {
      "type": "object",
      "properties": {
        "Bridge": {
          "type": "string"
        },
        "Gateway": {
          "type": "string"
        },
        "Address": {
          "type": "string"
        },
        "IPPrefixLen": {
          "type": "integer"
        },
        "MacAddress": {
          "type": "string"
        },
        "PortMapping": {
          "type": "string"
        },
        "Ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/port"
          }
        }
      }
    },
    "UpdateConfig": {
      "type": "object",
      "properties": {
        "BlkioWeight": {
          "description": "Block IO weight (relative weight vs. other containers) (UNIX only)",
          "type": "integer"
        },
        "CpuShares": {
          "description": "CPU shares (relative weight vs. other containers)",
          "type": "integer"
        },
        "CpuPeriod": {
          "description": "CPU Completely Fair Scheduler period (UNIX only)",
          "type": "integer"
        },
        "CpuQuota": {
          "description": "CPU Completely Fair Scheduler quota (UNIX only)",
          "type": "integer"
        },
        "CpusetCpus": {
          "type": "string"
        },
        "CpusetMems": {
          "type": "string"
        },
        "Memory": {
          "description": "Memory limit (in bytes)",
          "type": "integer"
        },
        "MemorySwap": {
          "type": "integer"
        },
        "MemoryReservation": {
          "type": "integer"
        },
        "KernelMemory": {
          "type": "integer"
        }
      },
      "example": {
        "BlkioWeight": 300,
        "CpuShares": 512,
        "CpuPeriod": 100000,
        "CpuQuota": 50000,
        "CpusetCpus": "0,1",
        "CpusetMems": "0",
        "Memory": 314572800,
        "MemorySwap": 514288000,
        "MemoryReservation": 209715200,
        "KernelMemory": 52428800,
        "RestartPolicy": {
          "MaximumRetryCount": 4,
          "Name": "on-failure"
        }
      }
    },
    "ContainerState": {
      "type": "object",
      "properties": {
        "Error": {
          "type": "string"
        },
        "ExitCode": {
          "type": "integer"
        },
        "FinishedAt": {
          "type": "string"
        },
        "OOMKilled": {
          "type": "boolean"
        },
        "Paused": {
          "type": "boolean"
        },
        "Pid": {
          "type": "integer"
        },
        "Restarting": {
          "type": "boolean"
        },
        "Running": {
          "type": "boolean"
        },
        "StartedAt": {
          "type": "string"
        }
      }
    },
    "Container": {
      "type": "object",
      "properties": {
        "AppArmorProfile": {
          "type": "string"
        },
        "Args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Config": {
          "$ref": "#/definitions/ContainerConfig"
        },
        "Created": {
          "type": "string"
        },
        "Driver": {
          "type": "string"
        },
        "ExecDriver": {
          "type": "string"
        },
        "ExecIDs": {
          "type": "string"
        },
        "HostConfig": {
          "$ref": "#/definitions/HostConfig"
        },
        "HostnamePath": {
          "type": "string"
        },
        "HostsPath": {
          "type": "string"
        },
        "LogPath": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Image": {
          "type": "string"
        },
        "MountLabel": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "NetworkSettings": {
          "$ref": "#/definitions/NetworkConfig"
        },
        "Path": {
          "type": "string"
        },
        "ProcessLabel": {
          "type": "string"
        },
        "ResolvConfPath": {
          "type": "string"
        },
        "RestartCount": {
          "type": "integer"
        },
        "State": {
          "$ref": "#/definitions/ContainerState"
        },
        "Mounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mount"
          }
        }
      }
    },
    "ContainerTop": {
      "type": "object",
      "properties": {
        "Titles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Processes": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "ContainerChange": {
      "type": "object",
      "properties": {
        "Path": {
          "type": "string"
        },
        "Kind": {
          "type": "integer",
          "description": "Kind of changes",
          "enum": [0, 1, 2]
        }
      }
    },
    "ContainerWait": {
      "type": "object",
      "properties": {
        "StatusCode": {
          "type": "integer"
        }
      }
    },
    "GraphDriver": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Data": {
          "type": "object"
        }
      }
    },
    "ImageItem": {
      "type": "object",
      "properties": {
        "RepoTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Id": {
          "type": "string"
        },
        "ParentId": {
          "type": "string"
        },
        "Created": {
          "type": "integer"
        },
        "Size": {
          "type": "integer"
        },
        "VirtualSize": {
          "type": "integer"
        },
        "Labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "RepoDigests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Container": {
          "type": "string"
        },
        "Comment": {
          "type": "string"
        },
        "Os": {
          "type": "string"
        },
        "Architecture": {
          "type": "string"
        },
        "Parent": {
          "type": "string"
        },
        "ContainerConfig": {
          "$ref": "#/definitions/ContainerConfig"
        },
        "DockerVersion": {
          "type": "string"
        },
        "VirtualSize": {
          "type": "integer"
        },
        "Size": {
          "type": "integer"
        },
        "Author": {
          "type": "string"
        },
        "Created": {
          "type": "string"
        },
        "GraphDriver": {
          "$ref": "#/definitions/GraphDriver"
        },
        "RepoDigests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "RepoTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Config": {
          "$ref": "#/definitions/ContainerConfig"
        }
      }
    },
    "ImageHistoryItem": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Created": {
          "type": "integer"
        },
        "CreatedBy": {
          "type": "string"
        },
        "Tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Size": {
          "type": "integer"
        },
        "Comment": {
          "type": "string"
        }
      }
    },
    "ImageSearchResult": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "is_official": {
          "type": "boolean"
        },
        "is_automated": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "star_count": {
          "type": "integer"
        }
      }
    },
    "AuthConfig": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "serveraddress": {
          "type": "string"
        }
      }
    },
    "SystemInformation": {
      "type": "object",
      "properties": {
        "Architecture": {
          "type": "string"
        },
        "Containers": {
          "type": "integer"
        },
        "ContainersRunning": {
          "type": "integer"
        },
        "ContainersStopped": {
          "type": "integer"
        },
        "ContainersPaused": {
          "type": "integer"
        },
        "CpuCfsPeriod": {
          "type": "boolean"
        },
        "CpuCfsQuota": {
          "type": "boolean"
        },
        "Debug": {
          "type": "boolean"
        },
        "DiscoveryBackend": {
          "type": "string"
        },
        "DockerRootDir": {
          "type": "string"
        },
        "Driver": {
          "type": "string"
        },
        "DriverStatus": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "SystemStatus": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "Plugins": {
          "type": "object",
          "properties": {
            "Volume": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Network": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ExecutionDriver": {
          "type": "string"
        },
        "ExperimentalBuild": {
          "type": "boolean"
        },
        "HttpProxy": {
          "type": "string"
        },
        "HttpsProxy": {
          "type": "string"
        },
        "ID": {
          "type": "string"
        },
        "IPv4Forwarding": {
          "type": "boolean"
        },
        "Images": {
          "type": "integer"
        },
        "IndexServerAddress": {
          "type": "string"
        },
        "InitPath": {
          "type": "string"
        },
        "InitSha1": {
          "type": "string"
        },
        "KernelVersion": {
          "type": "string"
        },
        "Labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MemTotal": {
          "type": "integer"
        },
        "MemoryLimit": {
          "type": "boolean"
        },
        "NCPU": {
          "type": "integer"
        },
        "NEventsListener": {
          "type": "integer"
        },
        "NFd": {
          "type": "integer"
        },
        "NGoroutines": {
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "NoProxy": {
          "type": "string"
        },
        "OomKillDisable": {
          "type": "boolean"
        },
        "OSType": {
          "type": "string"
        },
        "OomScoreAdj": {
          "type": "integer"
        },
        "OperatingSystem": {
          "type": "string"
        },
        "RegistryConfig": {
          "$ref": "#/definitions/RegistryConfig"
        },
        "SwapLimit": {
          "type": "boolean"
        },
        "SystemTime": {
          "type": "string"
        },
        "ServerVersion": {
          "type": "string"
        }
      }
    },
    "RegistryConfig": {
      "type": "object",
      "properties": {
        "IndexConfigs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Registry"
          }
        },
        "InsecureRegistryCIDRs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Registry": {
      "type": "object",
      "properties": {
        "Mirrors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Name": {
          "type": "string"
        },
        "Official": {
          "type": "boolean"
        },
        "Secure": {
          "type": "boolean"
        }
      }
    },
    "CommitResult": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        }
      }
    },
    "ExecCreateResult": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ExecConfig": {
      "type": "object",
      "properties": {
        "AttachStdin": {
          "type": "boolean"
        },
        "AttachStdout": {
          "type": "boolean"
        },
        "AttachStderr": {
          "type": "boolean"
        },
        "DetachKeys": {
          "type": "string"
        },
        "Tty": {
          "type": "boolean"
        },
        "Cmd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ExecStartConfig": {
      "type": "object",
      "properties": {
        "Detach": {
          "type": "boolean"
        },
        "Tty": {
          "type": "boolean"
        }
      }
    },
    "ExecCommand": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Running": {
          "type": "boolean"
        },
        "ExitCode": {
          "type": "integer"
        },
        "ProcessConfig": {
          "$ref": "#/definitions/ProcessConfig"
        },
        "OpenStdin": {
          "type": "boolean"
        },
        "OpenStderr": {
          "type": "boolean"
        },
        "OpenStdout": {
          "type": "boolean"
        },
        "Container": {
          "$ref": "#/definitions/Container"
        }
      }
    },
    "ProcessConfig": {
      "type": "object",
      "properties": {
        "privileged": {
          "type": "boolean"
        },
        "user": {
          "type": "string"
        },
        "tty": {
          "type": "boolean"
        },
        "entrypoint": {
          "type": "string"
        },
        "arguments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VolumeList": {
      "type": "object",
      "properties": {
        "Volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Volume"
          }
        }
      }
    },
    "Volume": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Driver": {
          "type": "string"
        },
        "Mountpoint": {
          "type": "string"
        }
      }
    },
    "VolumeConfig": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Driver": {
          "type": "string"
        },
        "DriverOpts": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Network": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Scope": {
          "type": "string"
        },
        "Driver": {
          "type": "string"
        },
        "IPAM": {
          "$ref": "#/definitions/IPAM"
        },
        "Containers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/NetworkContainer"
          }
        },
        "Options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "IPAM": {
      "type": "object",
      "properties": {
        "Config": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "NetworkContainer": {
      "type": "object",
      "properties": {
        "EndpointID": {
          "type": "string"
        },
        "MacAddress": {
          "type": "string"
        },
        "IPv4Address": {
          "type": "string"
        },
        "IPv6Address": {
          "type": "string"
        }
      }
    },
    "NetworkCreateResult": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Warning": {
          "type": "string"
        }
      }
    },
    "NetworkCreateConfig": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Driver": {
          "type": "string"
        },
        "IPAM": {
          "$ref": "#/definitions/IPAM"
        }
      }
    },
    "ContainerConnect": {
      "type": "object",
      "properties": {
        "Container": {
          "type": "string"
        }
      }
    },
    "ContainerDisconnect": {
      "type": "object",
      "properties": {
        "Container": {
          "type": "string"
        },
        "Force": {
          "type": "boolean"
        }
      }
    },
    "ContainerCreateResult": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ContainerUpdateResponse": {
      "type": "object",
      "properties": {
        "Warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BuildInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "stream": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "errorDetail": {
          "$ref": "#/definitions/ErrorDetail"
        },
        "status": {
          "type": "string"
        },
        "progress": {
          "type": "string"
        },
        "progressDetail": {
          "$ref": "#/definitions/ProgressDetail"
        }
      }
    },
    "CreateImageInfo": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "progress": {
          "type": "string"
        },
        "progressDetail": {
          "$ref": "#/definitions/ProgressDetail"
        }
      }
    },
    "PushImageInfo": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "progress": {
          "type": "string"
        },
        "progressDetail": {
          "$ref": "#/definitions/ProgressDetail"
        }
      }
    },
    "ErrorDetail": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ProgressDetail": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "integer"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "time": {
          "type": "integer"
        },
        "timeNano": {
          "type": "integer"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "Represents an error.",
      "properties": {
        "message": {
          "description": "The error message.",
          "type": "string",
          "required": true
        }
      },
      "example": {
        "message": "something went wrong"
      }
    },
    "ContainerListSummary": {
      "description": "The representation of a container when listing them.",
      "type": "object",
      "properties": {
        "Command": {
          "description": "Command to run when starting the container",
          "type": "string"
        },
        "Created": {
          "description": "When the container was created",
          "type": "integer",
          "format": "int64"
        },
        "HostConfig": {
          "type": "object",
          "properties": {
            "NetworkMode": {
              "type": "string"
            }
          }
        },
        "Id": {
          "description": "The ID of this container",
          "type": "string",
          "x-go-name": "ID"
        },
        "Image": {
          "description": "The name of the image used when creating this container",
          "type": "string"
        },
        "ImageID": {
          "description": "The ID of the image that this container was created from",
          "type": "string"
        },
        "Labels": {
          "description": "Labels that have been applied to this container",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Mounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mount"
          }
        },
        "Names": {
          "description": "The names that this container has been given",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "NetworkSettings": {
          "description": "A summary of the container's network settings",
          "type": "object",
          "properties": {
            "Networks": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/EndpointSettings"
              }
            }
          }
        },
        "Ports": {
          "description": "The ports exposed by this container",
          "type": "array",
          "items": {
            "$ref": "#/definitions/port"
          }
        },
        "SizeRootFs": {
          "description": "The total size of all the files in this container",
          "type": "integer",
          "format": "int64"
        },
        "SizeRw": {
          "description": "The size of files that have been created or changed by this container",
          "type": "integer",
          "format": "int64"
        },
        "State": {
          "description": "The state of this container (e.g. `Exited`)",
          "type": "string"
        },
        "Status": {
          "description": "Additional human-readable status of this container (e.g. `Exit 0`)",
          "type": "string"
        }
      }
    },
    "EndpointSettings": {
      "description": "EndpointSettings stores the network endpoint details",
      "type": "object",
      "properties": {
        "Aliases": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EndpointID": {
          "type": "string"
        },
        "Gateway": {
          "type": "string"
        },
        "GlobalIPv6Address": {
          "type": "string"
        },
        "GlobalIPv6PrefixLen": {
          "type": "integer",
          "format": "int64"
        },
        "IPAMConfig": {
          "description": "TODO"
        },
        "IPAddress": {
          "type": "string"
        },
        "IPPrefixLen": {
          "type": "integer",
          "format": "int64"
        },
        "IPv6Gateway": {
          "type": "string"
        },
        "Links": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MacAddress": {
          "type": "string"
        },
        "NetworkID": {
          "type": "string"
        }
      }
    }
  },
  "paths": {
    "/containers/json": {
      "get": {
        "summary": "List containers",
        "description": "List containers",
        "operationId": "GetContainerList",
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "all",
          "in": "query",
          "description": "Return all containers. By default, only running containers are shown",
          "type": "boolean",
          "default": false
        }, {
          "name": "limit",
          "in": "query",
          "description": "Return this number of most recently created containers, including non-running ones.",
          "type": "integer"
        }, {
          "name": "size",
          "in": "query",
          "description": "Return the size of container as fields `SizeRw` and `SizeRootFs`.",
          "type": "boolean",
          "default": false
        }, {
          "name": "filters",
          "in": "query",
          "description": "Filters to process on the container list, encoded as JSON (a map[string][]string). For example, `{\"status\": [\"paused\"]}` will only return paused containers.\n\nAvailable filters:\n -   `exited=<int>` containers with exit code of  `<int>`\n - `status=`(`created`|`restarting`|`running`|`paused`|`exited`|`dead`)\n - `label=key` or `label=\"key=value\"` of a container label\n - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)\n - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)\n - `before`=(`<container id>` or `<container name>`)\n - `since`=(`<container id>` or `<container name>`)\n - `volume`=(`<volume name>` or `<mount point destination>`)\n - `network`=(`<network id>` or `<network name>`)",
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContainerListSummary"
              }
            },
            "examples": {
              "application/json": [{
                "Id": "8dfafdbc3a40",
                "Names": ["/boring_feynman"],
                "Image": "ubuntu:latest",
                "ImageID": "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
                "Command": "echo 1",
                "Created": 1367854155,
                "State": "Exited",
                "Status": "Exit 0",
                "Ports": [{
                  "PrivatePort": 2222,
                  "PublicPort": 3333,
                  "Type": "tcp"
                }],
                "Labels": {
                  "com.example.vendor": "Acme",
                  "com.example.license": "GPL",
                  "com.example.version": "1.0"
                },
                "SizeRw": 12288,
                "SizeRootFs": 0,
                "HostConfig": {
                  "NetworkMode": "default"
                },
                "NetworkSettings": {
                  "Networks": {
                    "bridge": {
                      "IPAMConfig": null,
                      "Links": null,
                      "Aliases": null,
                      "NetworkID": "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
                      "EndpointID": "2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f",
                      "Gateway": "172.17.0.1",
                      "IPAddress": "172.17.0.2",
                      "IPPrefixLen": 16,
                      "IPv6Gateway": "",
                      "GlobalIPv6Address": "",
                      "GlobalIPv6PrefixLen": 0,
                      "MacAddress": "02:42:ac:11:00:02"
                    }
                  }
                },
                "Mounts": [{
                  "Name": "fac362...80535",
                  "Source": "/data",
                  "Destination": "/data",
                  "Driver": "local",
                  "Mode": "ro,Z",
                  "RW": false,
                  "Propagation": ""
                }]
              }, {
                "Id": "9cd87474be90",
                "Names": ["/coolName"],
                "Image": "ubuntu:latest",
                "ImageID": "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
                "Command": "echo 222222",
                "Created": 1367854155,
                "State": "Exited",
                "Status": "Exit 0",
                "Ports": [],
                "Labels": {},
                "SizeRw": 12288,
                "SizeRootFs": 0,
                "HostConfig": {
                  "NetworkMode": "default"
                },
                "NetworkSettings": {
                  "Networks": {
                    "bridge": {
                      "IPAMConfig": null,
                      "Links": null,
                      "Aliases": null,
                      "NetworkID": "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
                      "EndpointID": "88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a",
                      "Gateway": "172.17.0.1",
                      "IPAddress": "172.17.0.8",
                      "IPPrefixLen": 16,
                      "IPv6Gateway": "",
                      "GlobalIPv6Address": "",
                      "GlobalIPv6PrefixLen": 0,
                      "MacAddress": "02:42:ac:11:00:08"
                    }
                  }
                },
                "Mounts": []
              }, {
                "Id": "3176a2479c92",
                "Names": ["/sleepy_dog"],
                "Image": "ubuntu:latest",
                "ImageID": "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
                "Command": "echo 3333333333333333",
                "Created": 1367854154,
                "State": "Exited",
                "Status": "Exit 0",
                "Ports": [],
                "Labels": {},
                "SizeRw": 12288,
                "SizeRootFs": 0,
                "HostConfig": {
                  "NetworkMode": "default"
                },
                "NetworkSettings": {
                  "Networks": {
                    "bridge": {
                      "IPAMConfig": null,
                      "Links": null,
                      "Aliases": null,
                      "NetworkID": "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
                      "EndpointID": "8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d",
                      "Gateway": "172.17.0.1",
                      "IPAddress": "172.17.0.6",
                      "IPPrefixLen": 16,
                      "IPv6Gateway": "",
                      "GlobalIPv6Address": "",
                      "GlobalIPv6PrefixLen": 0,
                      "MacAddress": "02:42:ac:11:00:06"
                    }
                  }
                },
                "Mounts": []
              }, {
                "Id": "4cb07b47f9fb",
                "Names": ["/running_cat"],
                "Image": "ubuntu:latest",
                "ImageID": "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
                "Command": "echo 444444444444444444444444444444444",
                "Created": 1367854152,
                "State": "Exited",
                "Status": "Exit 0",
                "Ports": [],
                "Labels": {},
                "SizeRw": 12288,
                "SizeRootFs": 0,
                "HostConfig": {
                  "NetworkMode": "default"
                },
                "NetworkSettings": {
                  "Networks": {
                    "bridge": {
                      "IPAMConfig": null,
                      "Links": null,
                      "Aliases": null,
                      "NetworkID": "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
                      "EndpointID": "d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9",
                      "Gateway": "172.17.0.1",
                      "IPAddress": "172.17.0.5",
                      "IPPrefixLen": 16,
                      "IPv6Gateway": "",
                      "GlobalIPv6Address": "",
                      "GlobalIPv6PrefixLen": 0,
                      "MacAddress": "02:42:ac:11:00:05"
                    }
                  }
                },
                "Mounts": []
              }]
            }
          },
          "400": {
            "description": "bad parameter",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/create": {
      "post": {
        "summary": "Create a container",
        "description": "Create a container",
        "operationId": "PostContainerCreate",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "name",
          "in": "query",
          "description": "Assign the specified name to the container. Must match `/?[a-zA-Z0-9_-]+`.",
          "type": "string",
          "pattern": "/?[a-zA-Z0-9_-]+"
        }, {
          "name": "body",
          "in": "body",
          "description": "Container to create",
          "schema": {
            "$ref": "#/definitions/ContainerCreateConfig"
          },
          "required": true
        }],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ContainerCreateResult"
            },
            "examples": {
              "application/json": {
                "Id": "e90e34656806",
                "Warnings": []
              }
            }
          },
          "400": {
            "description": "bad parameter",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "406": {
            "description": "impossible to attach",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/json": {
      "get": {
        "summary": "Inspect a container",
        "description": "Return low-level information about a container.",
        "operationId": "GetContainerInspect",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/Container"
            },
            "examples": {
              "application/json": {
                "AppArmorProfile": "",
                "Args": [
                  "-c",
                  "exit 9"
                ],
                "Config": {
                  "AttachStderr": true,
                  "AttachStdin": false,
                  "AttachStdout": true,
                  "Cmd": [
                    "/bin/sh",
                    "-c",
                    "exit 9"
                  ],
                  "Domainname": "",
                  "Entrypoint": null,
                  "Env": [
                    "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                  ],
                  "ExposedPorts": null,
                  "Hostname": "ba033ac44011",
                  "Image": "ubuntu",
                  "Labels": {
                    "com.example.vendor": "Acme",
                    "com.example.license": "GPL",
                    "com.example.version": "1.0"
                  },
                  "MacAddress": "",
                  "NetworkDisabled": false,
                  "OnBuild": null,
                  "OpenStdin": false,
                  "StdinOnce": false,
                  "Tty": false,
                  "User": "",
                  "Volumes": {
                    "/volumes/data": {}
                  },
                  "WorkingDir": "",
                  "StopSignal": "SIGTERM"
                },
                "Created": "2015-01-06T15:47:31.485331387Z",
                "Driver": "devicemapper",
                "ExecIDs": null,
                "HostConfig": {
                  "Binds": null,
                  "MaximumIOps": 0,
                  "MaximumIOBps": 0,
                  "BlkioWeight": 0,
                  "BlkioWeightDevice": [{}],
                  "BlkioDeviceReadBps": [{}],
                  "BlkioDeviceWriteBps": [{}],
                  "BlkioDeviceReadIOps": [{}],
                  "BlkioDeviceWriteIOps": [{}],
                  "CapAdd": null,
                  "CapDrop": null,
                  "ContainerIDFile": "",
                  "CpusetCpus": "",
                  "CpusetMems": "",
                  "CpuPercent": 80,
                  "CpuShares": 0,
                  "CpuPeriod": 100000,
                  "Devices": [],
                  "Dns": null,
                  "DnsOptions": null,
                  "DnsSearch": null,
                  "ExtraHosts": null,
                  "IpcMode": "",
                  "Links": null,
                  "LxcConf": [],
                  "Memory": 0,
                  "MemorySwap": 0,
                  "MemoryReservation": 0,
                  "KernelMemory": 0,
                  "OomKillDisable": false,
                  "OomScoreAdj": 500,
                  "NetworkMode": "bridge",
                  "PidMode": "",
                  "PortBindings": {},
                  "Privileged": false,
                  "ReadonlyRootfs": false,
                  "PublishAllPorts": false,
                  "RestartPolicy": {
                    "MaximumRetryCount": 2,
                    "Name": "on-failure"
                  },
                  "LogConfig": {
                    "Config": null,
                    "Type": "json-file"
                  },
                  "SecurityOpt": null,
                  "Sysctls": {
                    "net.ipv4.ip_forward": "1"
                  },
                  "StorageOpt": null,
                  "VolumesFrom": null,
                  "Ulimits": [{}],
                  "VolumeDriver": "",
                  "ShmSize": 67108864
                },
                "HostnamePath": "/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname",
                "HostsPath": "/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts",
                "LogPath": "/var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log",
                "Id": "ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39",
                "Image": "04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2",
                "MountLabel": "",
                "Name": "/boring_euclid",
                "NetworkSettings": {
                  "Bridge": "",
                  "SandboxID": "",
                  "HairpinMode": false,
                  "LinkLocalIPv6Address": "",
                  "LinkLocalIPv6PrefixLen": 0,
                  "Ports": null,
                  "SandboxKey": "",
                  "SecondaryIPAddresses": null,
                  "SecondaryIPv6Addresses": null,
                  "EndpointID": "",
                  "Gateway": "",
                  "GlobalIPv6Address": "",
                  "GlobalIPv6PrefixLen": 0,
                  "IPAddress": "",
                  "IPPrefixLen": 0,
                  "IPv6Gateway": "",
                  "MacAddress": "",
                  "Networks": {
                    "bridge": {
                      "NetworkID": "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
                      "EndpointID": "7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d",
                      "Gateway": "172.17.0.1",
                      "IPAddress": "172.17.0.2",
                      "IPPrefixLen": 16,
                      "IPv6Gateway": "",
                      "GlobalIPv6Address": "",
                      "GlobalIPv6PrefixLen": 0,
                      "MacAddress": "02:42:ac:12:00:02"
                    }
                  }
                },
                "Path": "/bin/sh",
                "ProcessLabel": "",
                "ResolvConfPath": "/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf",
                "RestartCount": 1,
                "State": {
                  "Error": "",
                  "ExitCode": 9,
                  "FinishedAt": "2015-01-06T15:47:32.080254511Z",
                  "OOMKilled": false,
                  "Dead": false,
                  "Paused": false,
                  "Pid": 0,
                  "Restarting": false,
                  "Running": true,
                  "StartedAt": "2015-01-06T15:47:32.072697474Z",
                  "Status": "running"
                },
                "Mounts": [{
                  "Name": "fac362...80535",
                  "Source": "/data",
                  "Destination": "/data",
                  "Driver": "local",
                  "Mode": "ro,Z",
                  "RW": false,
                  "Propagation": ""
                }]
              }
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "size",
          "in": "query",
          "type": "boolean",
          "default": false,
          "description": "Return the size of container as fields `SizeRw` and `SizeRootFs`"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/top": {
      "get": {
        "summary": "List processes running inside a container",
        "description": "List processes running inside a container. On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows.",
        "operationId": "GetContainerTop",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ContainerTop"
            },
            "examples": {
              "application/json": {
                "Titles": [
                  "UID", "PID", "PPID", "C", "STIME", "TTY", "TIME", "CMD"
                ],
                "Processes": [
                  [
                    "root", "13642", "882", "0", "17:03", "pts/0", "00:00:00", "/bin/bash"
                  ],
                  [
                    "root", "13735", "13642", "0", "17:06", "pts/0", "00:00:00", "sleep 10"
                  ]
                ]
              }
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "ps_args",
          "in": "query",
          "description": "The arguments to pass to `ps`. For example, `aux`",
          "type": "string",
          "default": "-ef"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/logs": {
      "get": {
        "summary": "Get container logs",
        "description": "Get stdout and stderr logs from a container.\n\nNote: This endpoint works only for containers with the `json-file` or `journald` logging driver.",
        "operationId": "GetContainerLogs",
        "responses": {
          "101": {
            "description": "Logs returned as a stream. Hints proxies that the connection is being hijacked.",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "200": {
            "description": "Logs returned as a string in response body.",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "follow",
          "in": "query",
          "description": "Return the logs as a stream. This will return a `101` HTTP response with a `Connection: upgrade` header, then hijack the HTTP connection to send raw output.",
          "type": "boolean",
          "default": false
        }, {
          "name": "stdout",
          "in": "query",
          "description": "Return logs from stdout",
          "type": "boolean",
          "default": false
        }, {
          "name": "stderr",
          "in": "query",
          "description": "Return logs from stderr",
          "type": "boolean",
          "default": false
        }, {
          "name": "since",
          "in": "query",
          "description": "Only return logs since this time, as a UNIX timestamp",
          "type": "integer",
          "default": 0
        }, {
          "name": "timestamps",
          "in": "query",
          "description": "Add timestamps to every log line",
          "type": "boolean",
          "default": false
        }, {
          "name": "tail",
          "in": "query",
          "description": "Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines.",
          "type": "string",
          "default": "all"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/changes": {
      "get": {
        "summary": "Get changes on a container’s filesystem",
        "description": "Returns which files in a container's filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:\n - `0`: Modified\n - `1`: Added\n - `2`: Deleted",
        "operationId": "GetContainerChanges",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContainerChange"
              }
            },
            "examples": {
              "application/json": [{
                "Path": "/dev",
                "Kind": 0
              }, {
                "Path": "/dev/kmsg",
                "Kind": 1
              }, {
                "Path": "/test",
                "Kind": 1
              }]
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/export": {
      "get": {
        "summary": "Export a container",
        "description": "Export the contents of a container as a tarball.",
        "operationId": "GetContainerExport",
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "no error"
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/stats": {
      "get": {
        "summary": "Get container stats based on resource usage",
        "description": "This endpoint returns a live stream of a container’s resource usage statistics.\n\nThe `precpu_stats` is the CPU statistic of last read, which is used for calculating the CPU usage percentage. It is not the same as the `cpu_stats` field.",
        "operationId": "GetContainerStats",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "type": "object"
            },
            "examples": {
              "application/json": {
                "read": "2015-01-08T22:57:31.547920715Z",
                "pids_stats": {
                  "current": 3
                },
                "networks": {
                  "eth0": {
                    "rx_bytes": 5338,
                    "rx_dropped": 0,
                    "rx_errors": 0,
                    "rx_packets": 36,
                    "tx_bytes": 648,
                    "tx_dropped": 0,
                    "tx_errors": 0,
                    "tx_packets": 8
                  },
                  "eth5": {
                    "rx_bytes": 4641,
                    "rx_dropped": 0,
                    "rx_errors": 0,
                    "rx_packets": 26,
                    "tx_bytes": 690,
                    "tx_dropped": 0,
                    "tx_errors": 0,
                    "tx_packets": 9
                  }
                },
                "memory_stats": {
                  "stats": {
                    "total_pgmajfault": 0,
                    "cache": 0,
                    "mapped_file": 0,
                    "total_inactive_file": 0,
                    "pgpgout": 414,
                    "rss": 6537216,
                    "total_mapped_file": 0,
                    "writeback": 0,
                    "unevictable": 0,
                    "pgpgin": 477,
                    "total_unevictable": 0,
                    "pgmajfault": 0,
                    "total_rss": 6537216,
                    "total_rss_huge": 6291456,
                    "total_writeback": 0,
                    "total_inactive_anon": 0,
                    "rss_huge": 6291456,
                    "hierarchical_memory_limit": 67108864,
                    "total_pgfault": 964,
                    "total_active_file": 0,
                    "active_anon": 6537216,
                    "total_active_anon": 6537216,
                    "total_pgpgout": 414,
                    "total_cache": 0,
                    "inactive_anon": 0,
                    "active_file": 0,
                    "pgfault": 964,
                    "inactive_file": 0,
                    "total_pgpgin": 477
                  },
                  "max_usage": 6651904,
                  "usage": 6537216,
                  "failcnt": 0,
                  "limit": 67108864
                },
                "blkio_stats": {},
                "cpu_stats": {
                  "cpu_usage": {
                    "percpu_usage": [
                      8646879,
                      24472255,
                      36438778,
                      30657443
                    ],
                    "usage_in_usermode": 50000000,
                    "total_usage": 100215355,
                    "usage_in_kernelmode": 30000000
                  },
                  "system_cpu_usage": 739306590000000,
                  "throttling_data": {
                    "periods": 0,
                    "throttled_periods": 0,
                    "throttled_time": 0
                  }
                },
                "precpu_stats": {
                  "cpu_usage": {
                    "percpu_usage": [
                      8646879,
                      24350896,
                      36438778,
                      30657443
                    ],
                    "usage_in_usermode": 50000000,
                    "total_usage": 100093996,
                    "usage_in_kernelmode": 30000000
                  },
                  "system_cpu_usage": 9492140000000,
                  "throttling_data": {
                    "periods": 0,
                    "throttled_periods": 0,
                    "throttled_time": 0
                  }
                }
              }
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "stream",
          "in": "query",
          "description": "Stream the output. If false, the stats will be output once and then it will disconnect.",
          "type": "boolean",
          "default": true
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/resize": {
      "post": {
        "summary": "Resize a container TTY",
        "description": "Resize the TTY for a container. You must restart the container for the resize to take effect.",
        "operationId": "PostContainerResize",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "no error"
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "cannot resize container",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "h",
          "in": "query",
          "description": "Height of the tty session in characters",
          "type": "integer"
        }, {
          "name": "w",
          "in": "query",
          "description": "Width of the tty session in characters",
          "type": "integer"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/start": {
      "post": {
        "summary": "Start a container",
        "operationId": "PostContainerStart",
        "responses": {
          "204": {
            "description": "no error"
          },
          "304": {
            "description": "container already started",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "detachKeys",
          "in": "query",
          "description": "Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.",
          "type": "string"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/stop": {
      "post": {
        "summary": "Stop a container",
        "operationId": "PostContainerStop",
        "responses": {
          "204": {
            "description": "no error"
          },
          "304": {
            "description": "container already stopped",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "t",
          "in": "query",
          "description": "Number of seconds to wait before killing the container",
          "type": "integer"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/restart": {
      "post": {
        "summary": "Restart a container",
        "operationId": "PostContainerRestart",
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "204": {
            "description": "no error"
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "t",
          "in": "query",
          "description": "Number of seconds to wait before killing the container",
          "type": "integer"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/kill": {
      "post": {
        "summary": "Kill a container",
        "description": "Send a POSIX signal to a container, defaulting to killing to the container.",
        "operationId": "PostContainerKill",
        "responses": {
          "204": {
            "description": "no error"
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "signal",
          "in": "query",
          "description": "Signal to send to the container as an integer or string (e.g. `SIGINT`)",
          "type": "string",
          "default": "SIGKILL"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/update": {
      "post": {
        "summary": "Update a container",
        "description": "Change various configuration options of a container without having to recreate it.",
        "operationId": "PostContainerUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ContainerUpdateResponse"
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "update",
          "in": "body",
          "description": "Update config json",
          "schema": {
            "$ref": "#/definitions/UpdateConfig"
          },
          "required": true
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/rename": {
      "post": {
        "summary": "Rename a container",
        "operationId": "PostContainerRename",
        "responses": {
          "204": {
            "description": "no error"
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "409": {
            "description": "name already in use",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "required": true,
          "description": "New name for the container",
          "type": "string"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/pause": {
      "post": {
        "summary": "Pause a container",
        "description": "Pause the container id",
        "operationId": "PostContainerPause",
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "204": {
            "description": "no error"
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/unpause": {
      "post": {
        "summary": "Unpause a container",
        "description": "Unpause the container id",
        "operationId": "PostContainerUnpause",
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "204": {
            "description": "no error"
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/attach": {
      "post": {
        "summary": "Attach to a container",
        "description": "Attach to the container id",
        "operationId": "PostContainerAttach",
        "consumes": [
          "text/plain",
          "application/octet-stream"
        ],
        "produces": [
          "application/vnd.docker.raw-stream"
        ],
        "responses": {
          "101": {
            "description": "no error, hints proxy about hijacking"
          },
          "200": {
            "description": "no error, no upgrade header found"
          },
          "400": {
            "description": "bad parameter",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "detachKeys",
          "in": "query",
          "description": "Override the key sequence for detaching a container. Format is a single character [a-Z] or ctrl-<value> where <value> is one of: a-z, @, ^, [, , or _.",
          "type": "string"
        }, {
          "name": "logs",
          "in": "query",
          "description": "1/True/true or 0/False/false, return logs. Default false",
          "type": "boolean",
          "default": false
        }, {
          "name": "stream",
          "in": "query",
          "description": "1/True/true or 0/False/false, return stream. Default false",
          "type": "boolean",
          "default": false
        }, {
          "name": "stdin",
          "in": "query",
          "description": "1/True/true or 0/False/false, if stream=true, attach to stdin. Default false.",
          "type": "boolean",
          "default": false
        }, {
          "name": "stdout",
          "in": "query",
          "description": "1/True/true or 0/False/false, if logs=true, return stdout log, if stream=true, attach to stdout. Default false.",
          "type": "boolean",
          "default": false
        }, {
          "name": "stderr",
          "in": "query",
          "description": "1/True/true or 0/False/false, if logs=true, return stderr log, if stream=true, attach to stderr. Default false.",
          "type": "boolean",
          "default": false
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/attach/ws": {
      "get": {
        "summary": "Attach to a container (websocket)",
        "description": "Attach to the container id with a websocket.",
        "operationId": "PostContainerAttachWebsocket",
        "responses": {
          "101": {
            "description": "no error, hints proxy about hijacking"
          },
          "200": {
            "description": "no error, no upgrade header found"
          },
          "400": {
            "description": "bad parameter",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "logs",
          "in": "query",
          "description": "1/True/true or 0/False/false, return logs. Default false",
          "type": "boolean",
          "default": false
        }, {
          "name": "stream",
          "in": "query",
          "description": "1/True/true or 0/False/false, return stream. Default false",
          "type": "boolean",
          "default": false
        }, {
          "name": "stdin",
          "in": "query",
          "description": "1/True/true or 0/False/false, if stream=true, attach to stdin. Default false.",
          "type": "boolean",
          "default": false
        }, {
          "name": "stdout",
          "in": "query",
          "description": "1/True/true or 0/False/false, if logs=true, return stdout log, if stream=true, attach to stdout. Default false.",
          "type": "boolean",
          "default": false
        }, {
          "name": "stderr",
          "in": "query",
          "description": "1/True/true or 0/False/false, if logs=true, return stderr log, if stream=true, attach to stderr. Default false.",
          "type": "boolean",
          "default": false
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/wait": {
      "post": {
        "summary": "Wait a container",
        "description": "Block until container id stops, then returns the exit code",
        "operationId": "PostContainerWait",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ContainerWait"
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}": {
      "delete": {
        "summary": "Remove a container",
        "description": "Remove the container id from the filesystem",
        "operationId": "DeleteContainer",
        "responses": {
          "204": {
            "description": "no error"
          },
          "400": {
            "description": "bad parameter",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "v",
          "in": "query",
          "description": "1/True/true or 0/False/false, Remove the volumes associated to the container. Default false.",
          "type": "boolean",
          "default": false
        }, {
          "name": "force",
          "in": "query",
          "description": "1/True/true or 0/False/false, Kill then remove the container. Default false.",
          "type": "boolean",
          "default": false
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/containers/{id}/archive": {
      "head": {
        "summary": "Retrieving information about files and folders in a container",
        "description": "Get an tar archive of a resource in the filesystem of container",
        "operationId": "HeadContainerArchive",
        "responses": {
          "200": {
            "description": "no error"
          },
          "400": {
            "description": "client error, bad parameter, details in JSON response body, one of: must specify path parameter (path cannot be empty) not a directory (path was asserted to be a directory but exists as a file)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "client error, resource not found, one of: 1) no such container (container id does not exist) 2) no such file or directory (path resource does not exist)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "path",
          "in": "query",
          "required": true,
          "description": "Resource in the container’s filesystem to archive.",
          "type": "string"
        }],
        "tags": [
          "Container"
        ]
      },
      "get": {
        "summary": "Get an archive of a filesystem resource in a container",
        "description": "Get an tar archive of a resource in the filesystem of container id.",
        "operationId": "GetContainerArchive",
        "produces": [
          "application/x-tar"
        ],
        "responses": {
          "200": {
            "description": "no error"
          },
          "400": {
            "description": "client error, bad parameter, details in JSON response body, one of: must specify path parameter (path cannot be empty) not a directory (path was asserted to be a directory but exists as a file)",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "client error, resource not found, one of: 1) no such container (container id does not exist) 2) no such file or directory (path resource does not exist)",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "path",
          "in": "query",
          "required": true,
          "description": "Resource in the container’s filesystem to archive.",
          "type": "string"
        }],
        "tags": [
          "Container"
        ]
      },
      "put": {
        "summary": "Extract an archive of files or folders to a directory in a container",
        "description": "Upload a tar archive to be extracted to a path in the filesystem of container id.",
        "operationId": "PutContainerArchive",
        "consumes": [
          "application/x-tar",
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "The content was extracted successfully"
          },
          "400": {
            "description": "Bad parameter",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Permission denied, the volume or container rootfs is marked as read-only.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No such container or path does not exist inside the container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID or name of the container",
          "type": "string"
        }, {
          "name": "path",
          "in": "query",
          "required": true,
          "description": "Path to a directory in the container to extract the archive’s contents into. ",
          "type": "string"
        }, {
          "name": "noOverwriteDirNonDir",
          "in": "query",
          "description": "If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa.",
          "type": "string"
        }, {
          "name": "inputStream",
          "in": "body",
          "required": true,
          "description": "The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.",
          "schema": {
            "type": "string"
          }
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/images/json": {
      "get": {
        "summary": "List Images",
        "description": "List Images",
        "operationId": "GetImageList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImageItem"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "all",
          "in": "query",
          "description": "Show all images. Only images from a final layer (no children) are shown by default.",
          "type": "boolean",
          "default": false
        }, {
          "name": "filters",
          "in": "query",
          "description": "A JSON encoded value of the filters (a map[string][]string) to process on the containers list",
          "type": "string"
        }, {
          "name": "filter",
          "in": "query",
          "description": "Only return images with the specified name.",
          "type": "string"
        }, {
          "name": "digests",
          "in": "query",
          "description": "Show digest information, default to false",
          "type": "boolean"
        }],
        "tags": [
          "Image"
        ]
      }
    },
    "/build": {
      "post": {
        "summary": "Build an image from Dockerfile via stdin",
        "description": "Build an image from Dockerfile via stdin",
        "operationId": "PostImageBuild",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "name": "inputStream",
          "in": "body",
          "description": "The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "dockerfile",
          "in": "query",
          "description": "Path within the build context to the Dockerfile. This is ignored if remote is specified and points to an individual filename.",
          "type": "string"
        }, {
          "name": "t",
          "in": "query",
          "description": "A repository name (and optionally a tag) to apply to the resulting image in case of success.",
          "type": "string"
        }, {
          "name": "remote",
          "in": "query",
          "description": "A Git repository URI or HTTP/HTTPS URI build source. If the URI specifies a filename, the file’s contents are placed into a file called Dockerfile.",
          "type": "string"
        }, {
          "name": "q",
          "in": "query",
          "description": "Suppress verbose build output.",
          "type": "boolean",
          "default": false
        }, {
          "name": "nocache",
          "in": "query",
          "description": "Do not use the cache when building the image.",
          "type": "boolean",
          "default": false
        }, {
          "name": "pull",
          "in": "query",
          "description": "Attempt to pull the image even if an older image exists locally",
          "type": "string"
        }, {
          "name": "rm",
          "in": "query",
          "description": "Remove intermediate containers after a successful build (default behavior).",
          "type": "boolean",
          "default": true
        }, {
          "name": "forcerm",
          "in": "query",
          "description": "always remove intermediate containers (includes rm)",
          "type": "boolean",
          "default": false
        }, {
          "name": "memory",
          "in": "query",
          "description": "Set memory limit for build.",
          "type": "integer"
        }, {
          "name": "memswap",
          "in": "query",
          "description": "Total memory (memory + swap), -1 to disable swap.",
          "type": "integer"
        }, {
          "name": "cpushares",
          "in": "query",
          "description": "CPU shares (relative weight).",
          "type": "integer"
        }, {
          "name": "cpusetcpus",
          "in": "query",
          "description": "CPUs in which to allow execution (e.g., 0-3, 0,1).",
          "type": "string"
        }, {
          "name": "cpuperiod",
          "in": "query",
          "description": "The length of a CPU period in microseconds.",
          "type": "integer"
        }, {
          "name": "cpuquota",
          "in": "query",
          "description": "Microseconds of CPU time that the container can get in a CPU period.",
          "type": "integer"
        }, {
          "name": "buildargs",
          "in": "query",
          "description": "Total memory (memory + swap), -1 to disable swap.",
          "type": "integer"
        }, {
          "name": "Content-type",
          "in": "header",
          "description": " Set to 'application/tar'.",
          "type": "string",
          "enum": ["application/tar"],
          "default": "application/tar"
        }, {
          "name": "X-Registry-Auth",
          "in": "header",
          "description": "A base64-encoded AuthConfig object",
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "no error"
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Image"
        ]
      }
    },
    "/images/create": {
      "post": {
        "summary": "Create an image",
        "description": "Create an image either by pulling it from the registry or by importing it",
        "operationId": "PostImageCreate",
        "consumes": [
          "text/plain",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "no error"
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "fromImage",
          "in": "query",
          "description": "Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image.",
          "type": "string"
        }, {
          "name": "fromSrc",
          "in": "query",
          "description": "Source to import. The value may be a URL from which the image can be retrieved or - to read the image from the request body. This parameter may only be used when importing an image.",
          "type": "string"
        }, {
          "name": "repo",
          "in": "query",
          "description": "Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.",
          "type": "string"
        }, {
          "name": "tag",
          "in": "query",
          "description": "Tag or digest.",
          "type": "string"
        }, {
          "name": "inputImage",
          "in": "body",
          "description": "Image content if the value - has been specified in fromSrc query parameter",
          "schema": {
            "type": "string"
          },
          "required": false
        }, {
          "name": "X-Registry-Auth",
          "in": "header",
          "description": "A base64-encoded AuthConfig object",
          "type": "string"
        }],
        "tags": [
          "Image"
        ]
      }
    },
    "/images/{name}/json": {
      "get": {
        "summary": "Inspect an image",
        "description": "Return low-level information on the image name",
        "operationId": "GetImageInspect",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No error",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "404": {
            "description": "No such image",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "name",
          "in": "path",
          "description": "Image name or id",
          "type": "string",
          "required": true
        }],
        "tags": [
          "Image"
        ]
      }
    },
    "/images/{name}/history": {
      "get": {
        "summary": "Get the history of an image",
        "description": "Return the history of the image name",
        "operationId": "GetImageHistory",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImageHistoryItem"
              }
            }
          },
          "404": {
            "description": "No such image",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "name",
          "in": "path",
          "description": "Image name or id",
          "type": "string",
          "required": true
        }],
        "tags": [
          "Image"
        ]
      }
    },
    "/images/{name}/push": {
      "post": {
        "summary": "Push an image to the registry",
        "description": "Push the image name on the registry",
        "operationId": "PostImagePush",
        "consumes": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "No error"
          },
          "404": {
            "description": "No such image",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "name",
          "in": "path",
          "description": "Image name or id",
          "type": "string",
          "required": true
        }, {
          "name": "tag",
          "in": "query",
          "description": "The tag to associate with the image on the registry.",
          "type": "string"
        }, {
          "name": "X-Registry-Auth",
          "in": "header",
          "description": "A base64-encoded AuthConfig object",
          "type": "string",
          "required": true
        }],
        "tags": [
          "Image"
        ]
      }
    },
    "/images/{name}/tag": {
      "post": {
        "summary": "Tag an image into a repository",
        "description": "Tag the image name into a repository",
        "operationId": "PostImageTag",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "201": {
            "description": "No error"
          },
          "400": {
            "description": "Bad parameter",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No such image",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "name",
          "in": "path",
          "description": "Image name or id",
          "type": "string",
          "required": true
        }, {
          "name": "repo",
          "in": "query",
          "description": "The repository to tag in.",
          "type": "string"
        }, {
          "name": "force",
          "in": "query",
          "description": "1/True/true or 0/False/false, default false",
          "type": "boolean",
          "default": false
        }, {
          "name": "tag",
          "in": "query",
          "description": "The new tag name.",
          "type": "string"
        }],
        "tags": [
          "Image"
        ]
      }
    },
    "/images/{name}": {
      "delete": {
        "summary": "Remove an image",
        "description": "Remove the image name from the filesystem",
        "operationId": "DeleteImage",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No error"
          },
          "404": {
            "description": "No such image",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "name",
          "in": "path",
          "description": "Image name or id",
          "type": "string",
          "required": true
        }, {
          "name": "force",
          "in": "query",
          "description": "1/True/true or 0/False/false, default false",
          "type": "boolean",
          "default": false
        }, {
          "name": "noprune",
          "in": "query",
          "description": "1/True/true or 0/False/false, default false.",
          "type": "boolean",
          "default": false
        }],
        "tags": [
          "Image"
        ]
      }
    },
    "/images/search": {
      "get": {
        "summary": "Search images",
        "description": "Search for an image on Docker Hub.",
        "operationId": "GetImageSearch",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImageSearchResult"
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "term",
          "in": "query",
          "description": "Term to search",
          "type": "string"
        }],
        "tags": [
          "Image"
        ]
      }
    },
    "/auth": {
      "post": {
        "summary": "Check auth configuration",
        "description": "Check auth configuration.",
        "operationId": "checkAuthentication",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "No error"
          },
          "204": {
            "description": "No error"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "authConfig",
          "in": "body",
          "description": "Authentication to check",
          "schema": {
            "$ref": "#/definitions/AuthConfig"
          }
        }],
        "tags": [
          "Misc"
        ]
      }
    },
    "/info": {
      "get": {
        "summary": "Display system-wide information",
        "description": "Display system-wide information.",
        "operationId": "getSystemInformation",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No error",
            "schema": {
              "$ref": "#/definitions/SystemInformation"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Misc"
        ]
      }
    },
    "/version": {
      "get": {
        "summary": "Show the docker version information",
        "description": "Show the docker version information",
        "operationId": "getVersion",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/Version"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Misc"
        ]
      }
    },
    "/_ping": {
      "get": {
        "summary": "Ping the docker server",
        "description": "Ping the docker server",
        "operationId": "ping",
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Misc"
        ]
      }
    },
    "/commit": {
      "post": {
        "summary": "Create a new image from a container’s changes",
        "description": "Create a new image from a container’s changes",
        "operationId": "PostImageCommit",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/CommitResult"
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "containerConfig",
          "in": "body",
          "description": "The container configuration",
          "schema": {
            "$ref": "#/definitions/ContainerConfig"
          }
        }, {
          "name": "container",
          "in": "query",
          "description": "Container id or name to commit",
          "type": "string"
        }, {
          "name": "repo",
          "in": "query",
          "description": "Repository name for the created image",
          "type": "string"
        }, {
          "name": "tag",
          "in": "query",
          "description": "Tag name for the create image",
          "type": "string"
        }, {
          "name": "comment",
          "in": "query",
          "description": "Commit message",
          "type": "string"
        }, {
          "name": "author",
          "in": "query",
          "description": "author (e.g., “John Hannibal Smith <hannibal@a-team.com>“)",
          "type": "string"
        }, {
          "name": "pause",
          "in": "query",
          "description": "1/True/true or 0/False/false, whether to pause the container before committing",
          "type": "string"
        }, {
          "name": "changes",
          "in": "query",
          "description": "Dockerfile instructions to apply while committing",
          "type": "string"
        }],
        "tags": [
          "Image"
        ]
      }
    },
    "/events": {
      "get": {
        "summary": "Monitor Docker’s events",
        "description": "Get container events from docker, either in real time via streaming, or via polling (using since).",
        "operationId": "getEvents",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "no error"
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "since",
          "in": "query",
          "description": "Timestamp used for polling",
          "type": "string"
        }, {
          "name": "until",
          "in": "query",
          "description": "Timestamp used for polling",
          "type": "string"
        }, {
          "name": "filters",
          "in": "query",
          "description": "A json encoded value of the filters (a map[string][]string) to process on the event list.",
          "type": "string"
        }],
        "tags": [
          "Misc"
        ]
      }
    },
    "/images/{name}/get": {
      "get": {
        "summary": "Get a tarball containing all images in a repository",
        "description": "Get a tarball containing all images and metadata for the repository specified by name.",
        "operationId": "GetImage",
        "produces": [
          "application/x-tar"
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "name",
          "in": "path",
          "description": "Image name or id",
          "type": "string",
          "required": true
        }],
        "tags": [
          "Image"
        ]
      }
    },
    "/images/get": {
      "get": {
        "summary": "Get a tarball containing all images.",
        "description": "Get a tarball containing all images and metadata for one or more repositories.",
        "operationId": "GetImageSaveAll",
        "produces": [
          "application/x-tar"
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "names",
          "in": "query",
          "description": "Image names to filter",
          "type": "array",
          "items": {
            "type": "string"
          }
        }],
        "tags": [
          "Image"
        ]
      }
    },
    "/images/load": {
      "post": {
        "summary": "Load a tarball with a set of images and tags into docker.",
        "description": "Load a set of images and tags into a Docker repository. See the image tarball format for more details.",
        "operationId": "PostImageLoad",
        "consumes": [
          "application/x-tar",
          "application/octet-stream"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "no error"
          },
          "500": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "imagesTarball",
          "in": "body",
          "description": "Tar archive containing images",
          "schema": {
            "type": "string"
          }
        }],
        "tags": [
          "Image"
        ]
      }
    },
    "/containers/{id}/exec": {
      "post": {
        "summary": "Exec Create",
        "description": "Sets up an exec instance in a running container id",
        "operationId": "PostContainerExec",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/ExecCreateResult"
            }
          },
          "404": {
            "description": "no such container",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "message": "No such container: c2ada9df5af8"
              }
            }
          },
          "409": {
            "description": "container is paused",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "execConfig",
          "in": "body",
          "description": "Exec configuration",
          "schema": {
            "$ref": "#/definitions/ExecConfig"
          },
          "required": true
        }, {
          "name": "Content-Type",
          "in": "header",
          "description": "Content Type Header",
          "required": true,
          "type": "string",
          "default": "application/json"
        }, {
          "name": "id",
          "in": "path",
          "description": "Container name or id",
          "type": "string",
          "required": true
        }],
        "tags": [
          "Container"
        ]
      }
    },
    "/exec/{id}/start": {
      "post": {
        "summary": "Exec Start",
        "description": "Starts a previously set up exec instance id. If detach is true, this API returns after starting the exec command. Otherwise, this API sets up an interactive session with the exec command.",
        "operationId": "PostExecStart",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No error"
          },
          "404": {
            "description": "No such exec instance",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Container is stopped or paused",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "execStartConfig",
          "in": "body",
          "description": "Exec configuration",
          "schema": {
            "$ref": "#/definitions/ExecStartConfig"
          }
        }, {
          "name": "id",
          "in": "path",
          "description": "Exec instance id",
          "required": true,
          "type": "string"
        }],
        "tags": [
          "Exec"
        ]
      }
    },
    "/exec/{id}/resize": {
      "post": {
        "summary": "Exec Resize",
        "description": "Resize the tty session used by the exec command id.",
        "operationId": "PostExecResize",
        "consumes": [
          "text/plain",
          "application/octet-stream"
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "201": {
            "description": "No error"
          },
          "404": {
            "description": "No such exec instance",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Exec instance id",
          "required": true,
          "type": "string"
        }, {
          "name": "h",
          "in": "query",
          "description": "Height of the tty session",
          "type": "integer"
        }, {
          "name": "w",
          "in": "query",
          "description": "Width of the tty session",
          "type": "integer"
        }],
        "tags": [
          "Exec"
        ]
      }
    },
    "/exec/{id}/json": {
      "get": {
        "summary": "Exec Inspect",
        "description": "Return low-level information about the exec command id.",
        "operationId": "PostExecInspect",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No error",
            "schema": {
              "$ref": "#/definitions/ExecCommand"
            }
          },
          "404": {
            "description": "No such exec instance",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Exec instance id",
          "required": true,
          "type": "string"
        }],
        "tags": [
          "Exec"
        ]
      }
    },
    "/volumes": {
      "get": {
        "summary": "List volumes",
        "description": "List volumes.",
        "operationId": "GetVolumesList",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No error",
            "schema": {
              "$ref": "#/definitions/VolumeList"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "filters",
          "in": "query",
          "description": "JSON encoded value of the filters (a map[string][]string) to process on the volumes list",
          "type": "string"
        }],
        "tags": [
          "Volume"
        ]
      }
    },
    "/volumes/create": {
      "post": {
        "summary": "Create a volume",
        "description": "Create a volume.",
        "operationId": "PostVolumesCreate",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "No error",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "volumeConfig",
          "in": "body",
          "required": true,
          "description": "Volume configuration",
          "schema": {
            "$ref": "#/definitions/VolumeConfig"
          }
        }],
        "tags": [
          "Volume"
        ]
      }
    },
    "/volumes/{name}": {
      "get": {
        "summary": "Inspect a volume",
        "description": "Inspect a volume.",
        "operationId": "GetVolumesInspect",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No error",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "404": {
            "description": "No such volume",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "name",
          "in": "path",
          "required": true,
          "description": "Volume name or id",
          "type": "string"
        }],
        "tags": [
          "Volume"
        ]
      },
      "delete": {
        "summary": "Remove a volume",
        "description": "Instruct the driver to remove the volume.",
        "operationId": "DeleteVolumes",
        "responses": {
          "204": {
            "description": "No error"
          },
          "404": {
            "description": "No such volume or volume driver",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Volume is in use and cannot be removed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "name",
          "in": "path",
          "required": true,
          "description": "Volume name or id",
          "type": "string"
        }],
        "tags": [
          "Volume"
        ]
      }
    },
    "/networks": {
      "get": {
        "summary": "List networks",
        "description": "List networks.",
        "operationId": "GetNetworksList",
        "responses": {
          "200": {
            "description": "No error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Network"
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "filters",
          "in": "query",
          "description": "JSON encoded value of the filters (a map[string][]string) to process on the networks list.",
          "type": "string"
        }],
        "tags": [
          "Network"
        ]
      }
    },
    "/networks/{id}": {
      "get": {
        "summary": "Inspect network",
        "description": "Inspect network.",
        "operationId": "GetNetworksInspect",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "No error",
            "schema": {
              "$ref": "#/definitions/Network"
            }
          },
          "404": {
            "description": "Network not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Network id or name",
          "required": true,
          "type": "string"
        }],
        "tags": [
          "Network"
        ]
      },
      "delete": {
        "summary": "Remove a network",
        "description": "Remove a network",
        "operationId": "DeleteNetworks",
        "responses": {
          "204": {
            "description": "No error"
          },
          "404": {
            "description": "no such network",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Network id or name",
          "required": true,
          "type": "string"
        }],
        "tags": [
          "Network"
        ]
      }
    },
    "/networks/create": {
      "post": {
        "summary": "Create network",
        "description": "Create network.",
        "operationId": "PostNetworksCreate",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "No error",
            "schema": {
              "$ref": "#/definitions/NetworkCreateResult"
            }
          },
          "404": {
            "description": "plugin not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "networkConfig",
          "in": "body",
          "description": "Network configuration",
          "required": true,
          "schema": {
            "$ref": "#/definitions/NetworkCreateConfig"
          }
        }],
        "tags": [
          "Network"
        ]
      }
    },
    "/networks/{id}/connect": {
      "post": {
        "summary": "Connect a container to a network",
        "description": "Connect a container to a network.",
        "operationId": "PostNetworksConnect",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "responses": {
          "201": {
            "description": "No error"
          },
          "404": {
            "description": "Network or container not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Network id or name",
          "required": true,
          "type": "string"
        }, {
          "name": "container",
          "in": "body",
          "description": "Container",
          "required": true,
          "schema": {
            "$ref": "#/definitions/ContainerConnect"
          }
        }],
        "tags": [
          "Network"
        ]
      }
    },
    "/networks/{id}/disconnect": {
      "post": {
        "summary": "Disconnect a container to a network",
        "description": "Disconnect a container to a network.",
        "operationId": "PostNetworksDisconnect",
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "responses": {
          "201": {
            "description": "No error"
          },
          "404": {
            "description": "Network or container not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Network id or name",
          "required": true,
          "type": "string"
        }, {
          "name": "container",
          "in": "body",
          "description": "Container",
          "required": true,
          "schema": {
            "$ref": "#/definitions/ContainerDisconnect"
          }
        }],
        "tags": [
          "Network"
        ]
      }
    }
  }
}
